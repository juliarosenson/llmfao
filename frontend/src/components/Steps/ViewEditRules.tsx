import {
  Badge,
  Box,
  Button,
  Flex,
  HStack,
  Spacer,
  Spinner,
  Text,
  useToast,
  VStack
} from '@chakra-ui/react';
import React from 'react';
import { ColumnMappingsResponse, Rule } from '../../lib/prompt';

interface ViewEditRulesProps {
  rules?: ColumnMappingsResponse;
  step: number;
  setStep: (step: number) => void;
  onContinue?: () => Promise<void>;
}

const getRuleTypeLabel = (rule: Rule | null) => {
  if (!rule) return null;
  switch (rule.type) {
    case 'direct':
      return { label: 'DIRECT', desc: 'copy as-is' };
    case 'reformat':
      return { label: 'REFORMAT', desc: rule.configuration?.formatType ? `${rule.configuration.formatType} format` : 'reformat' };
    case 'combine':
      return { label: 'COMBINE', desc: `with "${rule.configuration?.separator || ', '}" separator` };
    default:
      return { label: rule.type.toUpperCase(), desc: '' };
  }
};

const getSourceLabel = (rule: Rule | null, mapping: any) => {
  if (!rule) return mapping.sourceField || mapping.targetColumn;
  if (rule.type === 'combine' && Array.isArray(rule.sourceField)) {
    return rule.sourceField.join(' + ');
  }
  return rule.sourceField || mapping.sourceField || mapping.targetColumn;
};


const needsInputDesc = (mapping: any) => {
  if (!mapping.rule) {
    if (mapping.targetColumn.toLowerCase().includes('name')) return 'needs your input';
    if (mapping.targetColumn.toLowerCase().includes('tribute')) return 'needs pattern detection';
    if (mapping.targetColumn.toLowerCase().includes('campaign')) return 'needs mapping';
    if (mapping.targetColumn.toLowerCase().includes('fund')) return 'needs lookup';
    return 'needs your input';
  }
  return '';
};

const ViewEditRules: React.FC<ViewEditRulesProps> = ({ rules, step, setStep, onContinue }) => {
  const [loading, setLoading] = React.useState(false);
  const toast = useToast();
  
  if (!rules) {
    return (
      <Box p={8}>
        <Text fontSize="lg" color="gray.600">
          No rules available. Please upload your dataset first.
        </Text>
      </Box>
    );
  }

  const total = rules.length;
  const autoGenerated = rules.filter(r => r.rule).length;
  const needsInput = rules.filter(r => !r.rule).length;

  const autoMappings = rules.filter(r => r.rule);
  const needsInputMappings = rules.filter(r => !r.rule);

  const handleContinue = async () => {
    setLoading(true);
    try {
      if (onContinue) {
        console.log('Calling onContinue callback');
        await onContinue();
      }
    } catch (error) {
        console.error('Error during continue:', error);
        toast({
          title: 'An error occurred while processing your file.',
          description: 'Please try again later.',
          status: 'error',
          duration: 3000,
          isClosable: true,
        });
      } finally {
      setLoading(false);
    }
  };

  return (
    <>
    {/* Loading Overlay */}
    {loading && (
      <Box
        position="fixed"
        top="0"
        left="0"
        right="0"
        bottom="0"
        bg="blackAlpha.600"
        backdropFilter="blur(10px)"
        display="flex"
        alignItems="center"
        justifyContent="center"
        zIndex="9999"
      >
        <VStack spacing={4}>
          <Spinner
            thickness="4px"
            speed="0.65s"
            emptyColor="gray.200"
            color="blue.500"
            size="xl"
          />
          <Text fontSize="lg" color="white" fontWeight="bold">
            Generating Preview...
          </Text>
        </VStack>
      </Box>
    )}

    <Box>
    <Box w="100%" maxW="1200px" mx="auto" mt={8} border="2px solid #38b6ff" borderRadius="lg" p={6}>
      <Text fontSize="2xl" fontWeight="bold" mb={1}>
        Review Column Mappings
      </Text>
      <Text color="gray.600" mb={6}>
        AI has analyzed your data and generated transformation rules
      </Text>
      <HStack spacing={10} mb={8}>
        <Box>
          <Text fontSize="2xl" fontWeight="bold" color="blue.600">{total}</Text>
          <Text fontSize="sm" color="gray.500">Total Mappings</Text>
        </Box>
        <Box>
          <Text fontSize="2xl" fontWeight="bold" color="blue.600">{autoGenerated}</Text>
          <Text fontSize="sm" color="gray.500">Auto-Generated</Text>
        </Box>
        <Box>
          <Text fontSize="2xl" fontWeight="bold" color="blue.600">{needsInput}</Text>
          <Text fontSize="sm" color="gray.500">Need Your Input</Text>
        </Box>
      </HStack>
      </Box>

      <br />

      {/* Auto-generated mappings */}
      {autoMappings.map((mapping, idx) => {
        const ruleType = getRuleTypeLabel(mapping.rule);
        return (
          <Box
            key={mapping.targetColumn}
            bg="white"
            borderRadius="lg"
            boxShadow="sm"
            p={5}
            mb={4}
            border="1px solid"
            borderColor="gray.200"
          >
            <Flex align="center">
              <Box>
                <Text fontWeight="bold" fontSize="lg" mb={1}>{mapping.targetColumn}</Text>
                <HStack>
                  <Badge colorScheme="gray" fontSize="md" px={2}>{getSourceLabel(mapping.rule, mapping)}</Badge>
                  <Text fontSize="xl" color="gray.400">→</Text>
                  {ruleType && (
                    <>
                      <Badge colorScheme="blue" fontSize="md" px={2}>{ruleType.label}</Badge>
                      <Text color="gray.500" fontSize="md" fontStyle="italic">{ruleType.desc}</Text>
                    </>
                  )}
                </HStack>
              </Box>
              <Spacer />
              <HStack>
                <Button size="sm" variant="outline">Edit</Button>
                <Button size="sm" variant="outline">Delete</Button>
              </HStack>
            </Flex>
          </Box>
        );
      })}

      {/* Needs input mappings */}
      {needsInputMappings.map((mapping, idx) => (
        <Box
          key={mapping.targetColumn}
          bg="white"
          borderRadius="lg"
          boxShadow="sm"
          p={5}
          mb={4}
          border="2px solid"
          borderColor="red.300"
        >
          <Flex align="center">
            <Box>
              <Text fontWeight="bold" fontSize="lg" mb={1}>{mapping.targetColumn}</Text>
              <HStack>
                <Badge colorScheme="gray" fontSize="md" px={2}>{getSourceLabel(mapping.rule, mapping)}</Badge>
                <Text fontSize="xl" color="gray.400">→</Text>
                <Text color="gray.500" fontSize="md" fontStyle="italic">{needsInputDesc(mapping)}</Text>
              </HStack>
            </Box>
            <Spacer />
            <HStack>
              <Badge colorScheme="red" variant="subtle" px={3} py={1} fontSize="md">
                ● Needs Input
              </Badge>
              <Button size="sm" colorScheme="blue" variant="solid">Edit</Button>
              <Button size="sm" variant="outline">Delete</Button>
            </HStack>
          </Flex>
        </Box>
      ))}

      <Flex justify="center" mt={10} gap={4}>
        <Button variant="outline" onClick={() => setStep(step - 1)}>
          ← Back to Upload
        </Button>
       <Button colorScheme="blue" onClick={handleContinue}>
          Continue to Preview →
        </Button>
      </Flex>
    </Box>
    </>
  );
};

export default ViewEditRules;